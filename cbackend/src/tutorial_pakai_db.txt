**Urutan komunikasi dengan database dalam Rust menggunakan `sqlx`:**  

1. **Membuat Database URL**  
   → Ambil URL database dari `.env` atau konfig manual.  
   ```rust
   let database_url = env::var("DB_URL").unwrap();
   ```

2. **Membuat Pool Koneksi (Connection Pool) 🔄**  
   → Connection pool digunakan agar koneksi ke database dapat digunakan ulang tanpa membuka koneksi baru setiap query.  
   ```rust
   let pool = SqlitePool::connect(&database_url).await?;
   ```

3. **Melakukan Query (Eksekusi SQL)**  
   → Gunakan `sqlx::query()` atau `sqlx::query_as()` untuk mengeksekusi SQL.  
   ```rust
   let result = sqlx::query("SELECT * FROM users").fetch_all(&pool).await?;
   ```

4. **Menggunakan atau Memproses Data**  
   → Data dari database bisa diproses atau dikembalikan ke frontend.  
   ```rust
   for user in result {
       println!("{:?}", user);
   }
   ```

5. **Menutup Pool (Opsional, biasanya otomatis ditutup saat aplikasi mati)**  
   ```rust
   pool.close().await;
   ```

---

### **Kesimpulan Urutan yang Benar:**
1. **Ambil URL database**  
2. **Buat pool koneksi (`SqlitePool`)**  
3. **Eksekusi query menggunakan pool**  
4. **Gunakan hasilnya**  
5. **Tutup pool jika perlu**  

**⚠️ Catatan:** Jangan langsung `connect()` setiap kali query, gunakan **pool** supaya lebih efisien!