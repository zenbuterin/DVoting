Berikut adalah contoh **dynamic routing** menggunakan **Rust (Actix Web) untuk backend** dan **React (React Router) untuk frontend**.  

---

### **📌 Backend (Rust - Actix Web)**
Di backend, kita buat endpoint dynamic seperti `/user/{id}` yang bisa menerima **ID user secara dinamis**.

#### **1️⃣ Setup Dependencies (`Cargo.toml`)**
Tambahkan dependensi berikut:
```toml
[dependencies]
actix-web = "4"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
```

#### **2️⃣ Buat File `main.rs`**
```rust
use actix_web::{web, App, HttpServer, Responder, HttpResponse};
use serde::{Deserialize, Serialize};

#[derive(Serialize)]
struct User {
    id: u32,
    name: String,
}

async fn get_user(path: web::Path<u32>) -> impl Responder {
    let user_id = path.into_inner();
    let user = User {
        id: user_id,
        name: format!("User {}", user_id),
    };

    HttpResponse::Ok().json(user)
}

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    HttpServer::new(|| {
        App::new()
            .route("/user/{id}", web::get().to(get_user))
    })
    .bind("127.0.0.1:8080")?
    .run()
    .await
}
```
✅ **Penjelasan**:  
- **`/user/{id}`** → Endpoint dynamic yang menerima ID dari URL.  
- **`get_user(path: web::Path<u32>)`** → Mendapatkan ID dari URL dan merespons JSON.  
- **Server berjalan di `127.0.0.1:8080`**.  

---

### **📌 Frontend (React)**
Di frontend, kita buat routing dengan **React Router** untuk menangkap ID dari URL.

#### **1️⃣ Install React Router**
```bash
npm install react-router-dom
```

#### **2️⃣ Setup `App.js`**
```jsx
import { BrowserRouter as Router, Route, Routes } from "react-router-dom";
import Home from "./Home";
import UserPage from "./UserPage";

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/user/:id" element={<UserPage />} />
      </Routes>
    </Router>
  );
}

export default App;
```
✅ **Penjelasan**:  
- **`/user/:id`** → Dynamic route untuk menangkap ID dari URL.  
- **`UserPage`** akan menerima ID dan mengambil data dari backend.  

#### **3️⃣ Buat `UserPage.js`**
```jsx
import { useParams } from "react-router-dom";
import { useEffect, useState } from "react";

function UserPage() {
  const { id } = useParams(); // Ambil ID dari URL
  const [user, setUser] = useState(null);

  useEffect(() => {
    fetch(`http://127.0.0.1:8080/user/${id}`)
      .then((res) => res.json())
      .then((data) => setUser(data));
  }, [id]);

  if (!user) return <p>Loading...</p>;

  return (
    <div>
      <h1>{user.name}</h1>
      <p>User ID: {user.id}</p>
    </div>
  );
}

export default UserPage;
```
✅ **Penjelasan**:  
- **`useParams()`** → Mengambil ID dari URL.  
- **`fetch()`** → Mengambil data dari backend menggunakan ID tersebut.  
- **`useEffect()`** → Memanggil API setiap kali ID berubah.  

---

### **📌 Cara Menjalankan**
1️⃣ **Jalankan Backend** (Rust - Actix Web)
```bash
cargo run
```
2️⃣ **Jalankan Frontend** (React)
```bash
npm start
```
3️⃣ **Akses di Browser**
- **Home**: `http://localhost:3000/`  
- **User dengan ID 5**: `http://localhost:3000/user/5`  
- **Akan memanggil backend di** `http://127.0.0.1:8080/user/5`  

---

### **🚀 Kesimpulan**
- Backend **Actix Web** menangani **dynamic route `/user/{id}`**.
- Frontend **React Router** menangkap **ID dari URL** dan menampilkan data dari backend.
- React mengambil data dengan **fetch API** berdasarkan ID yang diberikan.  

Ini adalah alur **frontend dan backend bekerja sama dengan dynamic route!** 🎯